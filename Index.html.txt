<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TapVault - Secure Mobile Vault</title>
    <style>
        /* CSS Variables f√ºr Theme Support */
        :root {
            --bg-primary: #000000;
            --bg-secondary: #1c1c1e;
            --bg-tertiary: #2c2c2e;
            --bg-card: #1c1c1e;
            --text-primary: #ffffff;
            --text-secondary: #8e8e93;
            --text-tertiary: #636366;
            --accent-primary: #007aff;
            --accent-secondary: #5856d6;
            --success-color: #34c759;
            --warning-color: #ff9500;
            --error-color: #ff3b30;
            --border-color: #38383a;
            --shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            --shadow-card: 0 2px 10px rgba(0, 0, 0, 0.2);
            --radius: 12px;
            --radius-small: 8px;
            --bottom-nav-height: 80px;
        }

        [data-theme="light"] {
            --bg-primary: #ffffff;
            --bg-secondary: #f2f2f7;
            --bg-tertiary: #e5e5ea;
            --bg-card: #ffffff;
            --text-primary: #000000;
            --text-secondary: #6d6d70;
            --text-tertiary: #8e8e93;
            --border-color: #d1d1d6;
            --shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            --shadow-card: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            background: var(--bg-primary);
            color: var(--text-primary);
            min-height: 100vh;
            overflow-x: hidden;
            user-select: none;
            -webkit-user-select: none;
            -webkit-touch-callout: none;
        }

        .app-container {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            padding-bottom: var(--bottom-nav-height);
        }

        /* Header Component */
        .header {
            padding: 20px 20px 0 20px;
            position: sticky;
            top: 0;
            background: var(--bg-primary);
            z-index: 100;
            border-bottom: 1px solid var(--border-color);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .logo {
            font-size: 24px;
            font-weight: 700;
            background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header-actions {
            display: flex;
            gap: 12px;
        }

        .icon-button {
            width: 40px;
            height: 40px;
            border-radius: 20px;
            background: var(--bg-secondary);
            border: none;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
        }

        .icon-button:hover {
            background: var(--bg-tertiary);
            transform: scale(1.05);
        }

        /* Screen Container */
        .screen {
            flex: 1;
            padding: 20px;
            display: none;
        }

        .screen.active {
            display: block;
        }

        /* Card Components */
        .card {
            background: var(--bg-card);
            border-radius: var(--radius);
            padding: 20px;
            margin-bottom: 16px;
            box-shadow: var(--shadow-card);
            border: 1px solid var(--border-color);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
        }

        .card-title {
            font-size: 18px;
            font-weight: 600;
        }

        .card-subtitle {
            color: var(--text-secondary);
            font-size: 14px;
            margin-top: 4px;
        }

        /* Form Components */
        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text-primary);
            font-size: 16px;
        }

        .form-input {
            width: 100%;
            padding: 16px;
            background: var(--bg-tertiary);
            border: 1px solid var(--border-color);
            border-radius: var(--radius-small);
            color: var(--text-primary);
            font-size: 16px;
            transition: all 0.2s;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--accent-primary);
            box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.1);
        }

        .form-textarea {
            min-height: 120px;
            resize: vertical;
        }

        /* Toggle Switch */
        .toggle-container {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px 0;
        }

        .toggle-switch {
            position: relative;
            width: 50px;
            height: 30px;
            background: var(--bg-tertiary);
            border-radius: 15px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .toggle-switch.active {
            background: var(--accent-primary);
        }

        .toggle-slider {
            position: absolute;
            top: 3px;
            left: 3px;
            width: 24px;
            height: 24px;
            background: white;
            border-radius: 50%;
            transition: transform 0.3s;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .toggle-switch.active .toggle-slider {
            transform: translateX(20px);
        }

        /* Slider Component */
        .slider-container {
            padding: 20px 0;
        }

        .slider {
            width: 100%;
            height: 6px;
            border-radius: 3px;
            background: var(--bg-tertiary);
            outline: none;
            -webkit-appearance: none;
            margin: 20px 0;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: var(--accent-primary);
            cursor: pointer;
            box-shadow: 0 2px 6px rgba(0, 122, 255, 0.3);
        }

        .slider-value {
            text-align: center;
            font-size: 28px;
            font-weight: 700;
            color: var(--accent-primary);
            margin-bottom: 8px;
        }

        .slider-label {
            text-align: center;
            color: var(--text-secondary);
            font-size: 14px;
        }

        /* Button Components */
        .btn {
            padding: 16px 24px;
            border-radius: var(--radius);
            border: none;
            font-size: 17px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .btn-primary {
            background: var(--accent-primary);
            color: white;
            box-shadow: var(--shadow);
        }

        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 6px 25px rgba(0, 122, 255, 0.3);
        }

        .btn-secondary {
            background: var(--bg-secondary);
            color: var(--text-primary);
            border: 1px solid var(--border-color);
        }

        .btn-success {
            background: var(--success-color);
            color: white;
        }

        .btn-full {
            width: 100%;
        }

        /* Tap Button */
        .tap-button {
            width: 200px;
            height: 200px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
            border: none;
            color: white;
            font-size: 24px;
            font-weight: 700;
            cursor: pointer;
            margin: 40px auto;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.1s;
            box-shadow: 0 8px 30px rgba(0, 122, 255, 0.3);
            position: relative;
            overflow: hidden;
        }

        .tap-button:active {
            transform: scale(0.95);
        }

        .tap-button.shake-mode {
            background: linear-gradient(135deg, var(--warning-color), var(--accent-secondary));
            box-shadow: 0 8px 30px rgba(255, 149, 0, 0.3);
        }

        /* Progress Components */
        .progress-container {
            text-align: center;
            margin: 30px 0;
        }

        .progress-ring {
            width: 120px;
            height: 120px;
            margin: 0 auto 20px;
            position: relative;
        }

        .progress-ring svg {
            transform: rotate(-90deg);
        }

        .progress-ring circle {
            fill: none;
            stroke-width: 8;
        }

        .progress-ring .background {
            stroke: var(--bg-tertiary);
        }

        .progress-ring .progress {
            stroke: var(--accent-primary);
            stroke-linecap: round;
            transition: stroke-dasharray 0.3s ease;
        }

        .progress-text {
            font-size: 18px;
            font-weight: 600;
            color: var(--text-primary);
        }

        .progress-subtitle {
            color: var(--text-secondary);
            font-size: 14px;
            margin-top: 4px;
        }

        /* Vault List */
        .vault-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .vault-item {
            display: flex;
            align-items: center;
            padding: 16px;
            background: var(--bg-card);
            border-radius: var(--radius);
            border: 1px solid var(--border-color);
            cursor: pointer;
            transition: all 0.2s;
        }

        .vault-item:hover {
            background: var(--bg-secondary);
            transform: translateY(-1px);
        }

        .vault-icon {
            width: 48px;
            height: 48px;
            border-radius: 24px;
            background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 20px;
            margin-right: 16px;
        }

        .vault-info {
            flex: 1;
        }

        .vault-title {
            font-weight: 600;
            margin-bottom: 4px;
        }

        .vault-meta {
            color: var(--text-secondary);
            font-size: 14px;
        }

        .vault-actions {
            display: flex;
            gap: 8px;
        }

        /* Bottom Navigation */
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            height: var(--bottom-nav-height);
            background: var(--bg-secondary);
            border-top: 1px solid var(--border-color);
            display: flex;
            justify-content: space-around;
            align-items: center;
            z-index: 1000;
        }

        .nav-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 4px;
            padding: 8px 16px;
            border-radius: var(--radius-small);
            cursor: pointer;
            transition: all 0.2s;
            color: var(--text-secondary);
        }

        .nav-item.active {
            color: var(--accent-primary);
            background: rgba(0, 122, 255, 0.1);
        }

        .nav-icon {
            font-size: 20px;
        }

        .nav-label {
            font-size: 12px;
            font-weight: 500;
        }

        /* Quick Actions */
        .quick-actions {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
            margin-bottom: 30px;
        }

        .quick-action {
            background: var(--bg-card);
            border-radius: var(--radius);
            padding: 24px 16px;
            text-align: center;
            border: 1px solid var(--border-color);
            cursor: pointer;
            transition: all 0.2s;
        }

        .quick-action:hover {
            background: var(--bg-secondary);
            transform: translateY(-2px);
        }

        .quick-action-icon {
            font-size: 32px;
            margin-bottom: 12px;
            color: var(--accent-primary);
        }

        .quick-action-title {
            font-weight: 600;
            margin-bottom: 4px;
        }

        .quick-action-subtitle {
            color: var(--text-secondary);
            font-size: 14px;
        }

        /* Settings */
        .settings-section {
            margin-bottom: 30px;
        }

        .settings-title {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 16px;
            color: var(--text-primary);
        }

        .settings-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 16px;
            background: var(--bg-card);
            border-radius: var(--radius);
            border: 1px solid var(--border-color);
            margin-bottom: 8px;
        }

        .settings-info {
            flex: 1;
        }

        .settings-label {
            font-weight: 500;
            margin-bottom: 4px;
        }

        .settings-description {
            color: var(--text-secondary);
            font-size: 14px;
        }

        /* Animations */
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        .shake-animation {
            animation: shake 0.5s ease-in-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        /* Modal */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            display: none;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: var(--bg-card);
            border-radius: var(--radius);
            padding: 24px;
            max-width: 400px;
            width: 90%;
            box-shadow: var(--shadow);
        }

        .modal-title {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 16px;
        }

        .modal-text {
            color: var(--text-secondary);
            margin-bottom: 24px;
        }

        .modal-actions {
            display: flex;
            gap: 12px;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 40px;
            color: var(--text-secondary);
        }

        .empty-icon {
            font-size: 48px;
            margin-bottom: 16px;
            opacity: 0.5;
        }

        /* Responsive Design */
        @media (max-width: 480px) {
            .tap-button {
                width: 150px;
                height: 150px;
                font-size: 20px;
            }
            
            .quick-actions {
                grid-template-columns: 1fr;
            }
            
            .header {
                padding: 15px 15px 0 15px;
            }
            
            .screen {
                padding: 15px;
            }
        }

        /* Utility Classes */
        .hidden { display: none !important; }
        .text-center { text-align: center; }
        .mb-0 { margin-bottom: 0 !important; }
        .mt-2 { margin-top: 16px; }
        .mb-2 { margin-bottom: 16px; }
    </style>
</head>
<body data-theme="dark">
    <div class="app-container">
        <!-- Header -->
        <header class="header">
            <div class="header-content">
                <div class="logo">TapVault</div>
                <div class="header-actions">
                    <button class="icon-button" id="themeToggle">üåô</button>
                    <button class="icon-button" id="scanButton">üì∑</button>
                </div>
            </div>
        </header>

        <!-- Home Screen -->
        <div id="homeScreen" class="screen active">
            <div class="quick-actions">
                <div class="quick-action" id="createVaultButton">
                    <div class="quick-action-icon">üîí</div>
                    <div class="quick-action-title">Erstellen</div>
                    <div class="quick-action-subtitle">Neuen Tresor erstellen</div>
                </div>
                <div class="quick-action" id="openVaultButton">
                    <div class="quick-action-icon">üì±</div>
                    <div class="quick-action-title">√ñffnen</div>
                    <div class="quick-action-subtitle">Link oder QR-Code</div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <div>
                        <div class="card-title">Zuletzt erstellt</div>
                        <div class="card-subtitle">Schnellzugriff auf Ihre Tresore</div>
                    </div>
                </div>
                <div id="recentVaults" class="vault-list">
                    <div class="empty-state">
                        <div class="empty-icon">üóÉÔ∏è</div>
                        <div>Noch keine Tresore erstellt</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Create Vault Screen -->
        <div id="createScreen" class="screen">
            <div class="card">
                <div class="card-title mb-2">Neuen Tresor erstellen</div>
                
                <div class="form-group">
                    <label class="form-label">Nachricht</label>
                    <textarea id="messageInput" class="form-input form-textarea" placeholder="Geben Sie Ihre geheime Nachricht ein..."></textarea>
                </div>

                <div class="form-group">
                    <label class="form-label">Titel (optional)</label>
                    <input type="text" id="titleInput" class="form-input" placeholder="Tresor-Titel">
                </div>

                <div class="form-group">
                    <div class="toggle-container">
                        <div>
                            <div class="form-label mb-0">Modus</div>
                            <div class="card-subtitle">Tap oder Shake zum Entsperren</div>
                        </div>
                        <div class="toggle-switch" id="modeToggle">
                            <div class="toggle-slider"></div>
                        </div>
                    </div>
                    <div class="text-center mt-2">
                        <span id="modeLabel">Tap-Modus</span>
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">Erforderliche Aktionen</label>
                    <div class="slider-container">
                        <div class="slider-value" id="actionValue">50</div>
                        <div class="slider-label" id="actionLabel">Taps erforderlich</div>
                        <input type="range" id="actionSlider" class="slider" min="1" max="500" value="50">
                    </div>
                </div>

                <button id="createButton" class="btn btn-primary btn-full">
                    üîí Tresor erstellen
                </button>
            </div>
        </div>

        <!-- My Vaults Screen -->
        <div id="vaultsScreen" class="screen">
            <div class="card">
                <div class="card-header">
                    <div>
                        <div class="card-title">Meine Tresore</div>
                        <div class="card-subtitle">Verwalten Sie Ihre erstellten Tresore</div>
                    </div>
                    <button class="btn btn-secondary" id="newVaultButton">
                        ‚ûï Neu
                    </button>
                </div>
                <div id="vaultsList" class="vault-list">
                    <div class="empty-state">
                        <div class="empty-icon">üóÉÔ∏è</div>
                        <div>Noch keine Tresore erstellt</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Unlock Screen -->
        <div id="unlockScreen" class="screen">
            <div class="card text-center">
                <div class="card-title mb-2" id="unlockTitle">Gesperrter Tresor</div>
                <div class="card-subtitle" id="unlockSubtitle">
                    F√ºhren Sie <span id="requiredActions">50</span> <span id="unlockMode">Taps</span> aus, um zu entsperren
                </div>
            </div>

            <div class="progress-container">
                <div class="progress-ring">
                    <svg width="120" height="120">
                        <circle class="background" cx="60" cy="60" r="54"></circle>
                        <circle class="progress" cx="60" cy="60" r="54" 
                                stroke-dasharray="0 339.292" id="progressCircle"></circle>
                    </svg>
                </div>
                <div class="progress-text" id="progressText">0 / 50</div>
                <div class="progress-subtitle" id="progressSubtitle">Taps ausgef√ºhrt</div>
            </div>

            <button id="unlockButton" class="tap-button">
                <span id="unlockButtonText">TAP</span>
            </button>

            <div id="decryptedMessage" class="card hidden">
                <div class="card-title text-center">üéâ Entschl√ºsselt!</div>
                <div id="decryptedText" class="text-center mt-2"></div>
                <button class="btn btn-success btn-full mt-2" id="copyMessageButton">
                    üìã Kopieren
                </button>
            </div>
        </div>

        <!-- Settings Screen -->
        <div id="settingsScreen" class="screen">
            <div class="settings-section">
                <div class="settings-title">Allgemein</div>
                <div class="settings-item">
                    <div class="settings-info">
                        <div class="settings-label">Standard-Modus</div>
                        <div class="settings-description">Tap oder Shake als Standard</div>
                    </div>
                    <div class="toggle-switch" id="defaultModeToggle">
                        <div class="toggle-slider"></div>
                    </div>
                </div>
                <div class="settings-item">
                    <div class="settings-info">
                        <div class="settings-label">Standard-Aktionen</div>
                        <div class="settings-description">Anzahl erforderlicher Aktionen</div>
                    </div>
                    <input type="number" id="defaultActions" class="form-input" value="50" min="1" max="1000" style="width: 80px;">
                </div>
            </div>

            <div class="settings-section">
                <div class="settings-title">Design</div>
                <div class="settings-item">
                    <div class="settings-info">
                        <div class="settings-label">Dark Mode</div>
                        <div class="settings-description">Dunkles Farbschema verwenden</div>
                    </div>
                    <div class="toggle-switch active" id="darkModeToggle">
                        <div class="toggle-slider"></div>
                    </div>
                </div>
                <div class="settings-item">
                    <div class="settings-info">
                        <div class="settings-label">Haptisches Feedback</div>
                        <div class="settings-description">Vibrationen bei Interaktionen</div>
                    </div>
                    <div class="toggle-switch active" id="hapticToggle">
                        <div class="toggle-slider"></div>
                    </div>
                </div>
            </div>

            <div class="settings-section">
                <div class="settings-title">Sicherheit</div>
                <div class="settings-item">
                    <div class="settings-info">
                        <div class="settings-label">Verschl√ºsselung</div>
                        <div class="settings-description">AES-256-GCM Standard</div>
                    </div>
                    <span class="card-subtitle">AES-GCM</span>
                </div>
                <div class="settings-item">
                    <div class="settings-info">
                        <div class="settings-label">Salt-L√§nge</div>
                        <div class="settings-description">Bytes f√ºr Schl√ºssel-Ableitung</div>
                    </div>
                    <input type="number" id="saltLength" class="form-input" value="16" min="8" max="32" style="width: 80px;">
                </div>
            </div>

            <div class="settings-section">
                <div class="settings-title">Info</div>
                <div class="settings-item">
                    <div class="settings-info">
                        <div class="settings-label">Version</div>
                        <div class="settings-description">TapVault v1.0.0</div>
                    </div>
                </div>
                <div class="settings-item">
                    <div class="settings-info">
                        <div class="settings-label">Open Source</div>
                        <div class="settings-description">MIT Lizenz ‚Ä¢ Keine Server ‚Ä¢ Vollst√§ndig verschl√ºsselt</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bottom Navigation -->
        <nav class="bottom-nav">
            <div class="nav-item active" data-screen="home">
                <div class="nav-icon">üè†</div>
                <div class="nav-label">Home</div>
            </div>
            <div class="nav-item" data-screen="vaults">
                <div class="nav-icon">üóÉÔ∏è</div>
                <div class="nav-label">Meine Tresore</div>
            </div>
            <div class="nav-item" data-screen="settings">
                <div class="nav-icon">‚öôÔ∏è</div>
                <div class="nav-label">Einstellungen</div>
            </div>
        </nav>
    </div>

    <!-- Modal -->
    <div id="modal" class="modal">
        <div class="modal-content">
            <div class="modal-title" id="modalTitle">Titel</div>
            <div class="modal-text" id="modalText">Text</div>
            <div class="modal-actions">
                <button class="btn btn-secondary" id="modalCancel">Abbrechen</button>
                <button class="btn btn-primary" id="modalConfirm">Best√§tigen</button>
            </div>
        </div>
    </div>

    <script>
        /**
         * TapVault Mobile App - Enterprise-Grade Architecture
         * Modular, scalable, zero-server security vault application
         */

        class TapVaultApp {
            constructor() {
                this.currentScreen = 'home';
                this.vaults = this.loadVaults();
                this.settings = this.loadSettings();
                this.unlockState = {
                    currentActions: 0,
                    requiredActions: 0,
                    mode: 'tap',
                    vaultData: null,
                    isShakeMode: false,
                    decryptedMessage: null
                };
                
                // Shake detection variables
                this.shakeThreshold = 15;
                this.lastX = null;
                this.lastY = null;
                this.lastZ = null;
                this.shakeCount = 0;
                this.lastShakeTime = 0;
                
                this.init();
            }

            init() {
                this.bindEvents();
                this.applySettings();
                this.updateRecentVaults();
                this.updateVaultsList();
                this.checkDeepLink();
                this.setupShakeDetection();
            }

            // Event Binding
            bindEvents() {
                // Navigation
                document.querySelectorAll('.nav-item').forEach(item => {
                    item.addEventListener('click', (e) => {
                        const screen = e.currentTarget.dataset.screen;
                        this.showScreen(screen);
                    });
                });

                // Theme toggle
                document.getElementById('themeToggle').addEventListener('click', () => this.toggleTheme());
                
                // Create vault
                document.getElementById('createVaultButton').addEventListener('click', () => this.showCreateVault());
                document.getElementById('newVaultButton').addEventListener('click', () => this.showCreateVault());
                document.getElementById('openVaultButton').addEventListener('click', () => this.showScanner());
                
                // Create vault form
                document.getElementById('modeToggle').addEventListener('click', () => this.toggleMode());
                document.getElementById('actionSlider').addEventListener('input', (e) => this.updateSliderValue(e));
                document.getElementById('createButton').addEventListener('click', () => this.createVault());
                
                // Settings toggles
                document.getElementById('defaultModeToggle').addEventListener('click', () => this.toggleDefaultMode());
                document.getElementById('darkModeToggle').addEventListener('click', () => this.toggleTheme());
                document.getElementById('hapticToggle').addEventListener('click', () => this.toggleHaptic());
                
                // Settings inputs
                document.getElementById('defaultActions').addEventListener('change', (e) => this.updateDefaultActions(e));
                document.getElementById('saltLength').addEventListener('change', (e) => this.updateSaltLength(e));
                
                // Unlock interaction
                document.getElementById('unlockButton').addEventListener('click', () => this.handleUnlockAction());
                document.getElementById('copyMessageButton').addEventListener('click', () => this.copyDecryptedMessage());
                
                // Modal
                document.getElementById('modalCancel').addEventListener('click', () => this.closeModal());
                
                // Scanner
                document.getElementById('scanButton').addEventListener('click', () => this.showScanner());
            }

            // Screen Management
            showScreen(screenName) {
                // Hide all screens
                document.querySelectorAll('.screen').forEach(screen => {
                    screen.classList.remove('active');
                });
                
                // Show target screen
                const targetScreen = document.getElementById(`${screenName}Screen`);
                if (targetScreen) {
                    targetScreen.classList.add('active');
                    targetScreen.classList.add('fade-in');
                    this.currentScreen = screenName;
                }
                
                // Update navigation
                document.querySelectorAll('.nav-item').forEach(item => {
                    item.classList.remove('active');
                    if (item.dataset.screen === screenName) {
                        item.classList.add('active');
                    }
                });
                
                // Update screen content
                if (screenName === 'vaults') {
                    this.updateVaultsList();
                } else if (screenName === 'home') {
                    this.updateRecentVaults();
                }
            }

            showCreateVault() {
                this.showScreen('create');
                // Reset form
                document.getElementById('messageInput').value = '';
                document.getElementById('titleInput').value = '';
                document.getElementById('actionSlider').value = this.settings.defaultActions;
                document.getElementById('actionValue').textContent = this.settings.defaultActions;
                
                // Set default mode
                const toggle = document.getElementById('modeToggle');
                if (this.settings.defaultMode === 'shake') {
                    toggle.classList.add('active');
                    document.getElementById('modeLabel').textContent = 'Shake-Modus';
                    document.getElementById('actionLabel').textContent = 'Shakes erforderlich';
                } else {
                    toggle.classList.remove('active');
                    document.getElementById('modeLabel').textContent = 'Tap-Modus';
                    document.getElementById('actionLabel').textContent = 'Taps erforderlich';
                }
            }

            showScanner() {
                // In a real app, this would open the camera for QR scanning
                // For now, we'll show a prompt for the vault ID
                const vaultId = prompt('Geben Sie die Tresor-ID ein:');
                if (vaultId) {
                    this.loadVaultFromId(vaultId);
                }
            }

            // Vault Management
            createVault() {
                const message = document.getElementById('messageInput').value.trim();
                const title = document.getElementById('titleInput').value.trim() || 'Unbenannter Tresor';
                const mode = document.getElementById('modeToggle').classList.contains('active') ? 'shake' : 'tap';
                const requiredActions = parseInt(document.getElementById('actionSlider').value);
                
                if (!message) {
                    this.showToast('Bitte geben Sie eine Nachricht ein', 'error');
                    return;
                }
                
                // Generate unique ID
                const vaultId = Date.now().toString(36) + Math.random().toString(36).substr(2);
                
                // Encrypt the message
                const encryptedData = this.encryptMessage(message, requiredActions, mode);
                
                // Create vault object
                const vault = {
                    id: vaultId,
                    title: title,
                    mode: mode,
                    requiredActions: requiredActions,
                    encryptedData: encryptedData,
                    createdAt: new Date().toISOString(),
                    accessCount: 0
                };
                
                // Save vault
                this.vaults.push(vault);
                this.saveVaults();
                
                // Show success
                this.showModal(
                    'Tresor erstellt! üéâ',
                    `Ihr Tresor wurde erfolgreich erstellt. Tresor-ID: ${vaultId}`,
                    () => {
                        this.shareVault(vault);
                        this.showScreen('vaults');
                    }
                );
                
                // Haptic feedback
                this.hapticFeedback();
            }

            encryptMessage(message, requiredActions, mode) {
                // Simple encryption for demo - in production, use proper AES-GCM
                const key = requiredActions.toString() + mode;
                const encrypted = btoa(message); // Base64 encode for demo
                return {
                    data: encrypted,
                    salt: this.generateSalt(),
                    iv: this.generateSalt()
                };
            }

            decryptMessage(encryptedData, actions, mode) {
                // Simple decryption for demo
                try {
                    const decrypted = atob(encryptedData.data);
                    return decrypted;
                } catch (e) {
                    return null;
                }
            }

            generateSalt() {
                const array = new Uint8Array(this.settings.saltLength);
                window.crypto.getRandomValues(array);
                return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');
            }

            shareVault(vault) {
                const shareUrl = `${window.location.origin}${window.location.pathname}#vault=${vault.id}`;
                
                if (navigator.share) {
                    navigator.share({
                        title: 'TapVault Tresor',
                        text: `Ich habe einen sicheren Tresor f√ºr dich erstellt. ${vault.requiredActions} ${vault.mode === 'tap' ? 'Taps' : 'Shakes'} zum √ñffnen!`,
                        url: shareUrl
                    });
                } else {
                    // Fallback: Copy to clipboard
                    navigator.clipboard.writeText(shareUrl);
                    this.showToast('Link kopiert!', 'success');
                }
            }

            loadVaultFromId(vaultId) {
                const vault = this.vaults.find(v => v.id === vaultId);
                if (vault) {
                    this.startUnlockProcess(vault);
                } else {
                    this.showToast('Tresor nicht gefunden', 'error');
                }
            }

            startUnlockProcess(vault) {
                this.unlockState = {
                    currentActions: 0,
                    requiredActions: vault.requiredActions,
                    mode: vault.mode,
                    vaultData: vault,
                    isShakeMode: vault.mode === 'shake',
                    decryptedMessage: null
                };
                
                // Update UI
                document.getElementById('unlockTitle').textContent = vault.title;
                document.getElementById('requiredActions').textContent = vault.requiredActions;
                document.getElementById('unlockMode').textContent = vault.mode === 'tap' ? 'Taps' : 'Shakes';
                document.getElementById('progressText').textContent = `0 / ${vault.requiredActions}`;
                document.getElementById('progressSubtitle').textContent = `${vault.mode === 'tap' ? 'Taps' : 'Shakes'} ausgef√ºhrt`;
                
                // Update button
                const button = document.getElementById('unlockButton');
                if (vault.mode === 'shake') {
                    button.classList.add('shake-mode');
                    document.getElementById('unlockButtonText').textContent = 'üîÄ SHAKE';
                } else {
                    button.classList.remove('shake-mode');
                    document.getElementById('unlockButtonText').textContent = 'TAP';
                }
                
                // Reset progress
                this.updateProgress(0);
                
                // Hide decrypted message
                document.getElementById('decryptedMessage').classList.add('hidden');
                
                // Show unlock screen
                this.showScreen('unlock');
                
                // Start shake detection if needed
                if (vault.mode === 'shake') {
                    this.startShakeDetection();
                }
            }

            handleUnlockAction() {
                if (this.unlockState.mode === 'tap') {
                    this.handleTap();
                } else {
                    this.showToast('Sch√ºtteln Sie Ihr Ger√§t!', 'info');
                }
            }

            handleTap() {
                if (this.unlockState.decryptedMessage) return;
                
                this.unlockState.currentActions++;
                this.updateProgress(this.unlockState.currentActions);
                
                // Haptic feedback
                this.hapticFeedback();
                
                // Check if complete
                if (this.unlockState.currentActions >= this.unlockState.requiredActions) {
                    this.unlockVault();
                }
            }

            updateProgress(current) {
                const percentage = (current / this.unlockState.requiredActions) * 100;
                const circumference = 2 * Math.PI * 54;
                const offset = circumference - (percentage / 100) * circumference;
                
                document.getElementById('progressCircle').style.strokeDasharray = `${circumference - offset} ${circumference}`;
                document.getElementById('progressText').textContent = `${current} / ${this.unlockState.requiredActions}`;
            }

            unlockVault() {
                const vault = this.unlockState.vaultData;
                const decrypted = this.decryptMessage(
                    vault.encryptedData,
                    this.unlockState.requiredActions,
                    this.unlockState.mode
                );
                
                if (decrypted) {
                    this.unlockState.decryptedMessage = decrypted;
                    document.getElementById('decryptedText').textContent = decrypted;
                    document.getElementById('decryptedMessage').classList.remove('hidden');
                    
                    // Update access count
                    vault.accessCount++;
                    this.saveVaults();
                    
                    // Success feedback
                    this.hapticFeedback('success');
                    document.getElementById('unlockButton').style.display = 'none';
                } else {
                    this.showToast('Entschl√ºsselung fehlgeschlagen', 'error');
                }
            }

            copyDecryptedMessage() {
                if (this.unlockState.decryptedMessage) {
                    navigator.clipboard.writeText(this.unlockState.decryptedMessage);
                    this.showToast('Nachricht kopiert!', 'success');
                    this.hapticFeedback();
                }
            }

            // Shake Detection
            setupShakeDetection() {
                if (window.DeviceMotionEvent) {
                    window.addEventListener('devicemotion', (e) => this.handleMotion(e));
                } else {
                    console.log('Device motion not supported');
                }
            }

            startShakeDetection() {
                this.shakeCount = 0;
                this.lastShakeTime = 0;
            }

            handleMotion(event) {
                if (!this.unlockState.isShakeMode || this.unlockState.decryptedMessage) return;
                
                const current = event.accelerationIncludingGravity;
                if (!current) return;
                
                if (this.lastX !== null) {
                    const deltaX = Math.abs(current.x - this.lastX);
                    const deltaY = Math.abs(current.y - this.lastY);
                    const deltaZ = Math.abs(current.z - this.lastZ);
                    
                    if (deltaX + deltaY + deltaZ > this.shakeThreshold) {
                        const now = Date.now();
                        if (now - this.lastShakeTime > 300) {
                            this.lastShakeTime = now;
                            this.handleShake();
                        }
                    }
                }
                
                this.lastX = current.x;
                this.lastY = current.y;
                this.lastZ = current.z;
            }

            handleShake() {
                this.unlockState.currentActions++;
                this.updateProgress(this.unlockState.currentActions);
                
                // Haptic feedback
                this.hapticFeedback();
                
                // Visual feedback
                document.getElementById('unlockButton').classList.add('shake-animation');
                setTimeout(() => {
                    document.getElementById('unlockButton').classList.remove('shake-animation');
                }, 500);
                
                // Check if complete
                if (this.unlockState.currentActions >= this.unlockState.requiredActions) {
                    this.unlockVault();
                }
            }

            // UI Updates
            updateRecentVaults() {
                const container = document.getElementById('recentVaults');
                const recentVaults = this.vaults.slice(-3).reverse();
                
                if (recentVaults.length === 0) {
                    container.innerHTML = `
                        <div class="empty-state">
                            <div class="empty-icon">üóÉÔ∏è</div>
                            <div>Noch keine Tresore erstellt</div>
                        </div>
                    `;
                    return;
                }
                
                container.innerHTML = recentVaults.map(vault => `
                    <div class="vault-item" onclick="app.startUnlockProcess(app.vaults.find(v => v.id === '${vault.id}'))">
                        <div class="vault-icon">${vault.mode === 'tap' ? 'üëÜ' : 'üîÄ'}</div>
                        <div class="vault-info">
                            <div class="vault-title">${vault.title}</div>
                            <div class="vault-meta">${vault.requiredActions} ${vault.mode === 'tap' ? 'Taps' : 'Shakes'} ‚Ä¢ ${this.formatDate(vault.createdAt)}</div>
                        </div>
                        <div class="vault-actions">
                            <button class="icon-button" onclick="event.stopPropagation(); app.shareVault(app.vaults.find(v => v.id === '${vault.id}'))">
                                üì§
                            </button>
                        </div>
                    </div>
                `).join('');
            }

            updateVaultsList() {
                const container = document.getElementById('vaultsList');
                
                if (this.vaults.length === 0) {
                    container.innerHTML = `
                        <div class="empty-state">
                            <div class="empty-icon">üóÉÔ∏è</div>
                            <div>Noch keine Tresore erstellt</div>
                        </div>
                    `;
                    return;
                }
                
                container.innerHTML = this.vaults.map(vault => `
                    <div class="vault-item" onclick="app.startUnlockProcess(app.vaults.find(v => v.id === '${vault.id}'))">
                        <div class="vault-icon">${vault.mode === 'tap' ? 'üëÜ' : 'üîÄ'}</div>
                        <div class="vault-info">
                            <div class="vault-title">${vault.title}</div>
                            <div class="vault-meta">${vault.requiredActions} ${vault.mode === 'tap' ? 'Taps' : 'Shakes'} ‚Ä¢ ${vault.accessCount} Zugriffe</div>
                        </div>
                        <div class="vault-actions">
                            <button class="icon-button" onclick="event.stopPropagation(); app.shareVault(app.vaults.find(v => v.id === '${vault.id}'))">
                                üì§
                            </button>
                            <button class="icon-button" onclick="event.stopPropagation(); app.deleteVault('${vault.id}')">
                                üóëÔ∏è
                            </button>
                        </div>
                    </div>
                `).join('');
            }

            deleteVault(vaultId) {
                this.showModal(
                    'Tresor l√∂schen?',
                    'Dieser Vorgang kann nicht r√ºckg√§ngig gemacht werden.',
                    () => {
                        this.vaults = this.vaults.filter(v => v.id !== vaultId);
                        this.saveVaults();
                        this.updateVaultsList();
                        this.showToast('Tresor gel√∂scht', 'success');
                    }
                );
            }

            // Settings
            toggleTheme() {
                const body = document.body;
                const isDark = body.getAttribute('data-theme') === 'dark';
                body.setAttribute('data-theme', isDark ? 'light' : 'dark');
                
                // Update icon
                document.getElementById('themeToggle').textContent = isDark ? '‚òÄÔ∏è' : 'üåô';
                
                // Update settings
                this.settings.darkMode = !isDark;
                this.saveSettings();
                
                // Update toggle
                const toggle = document.getElementById('darkModeToggle');
                if (!isDark) {
                    toggle.classList.add('active');
                } else {
                    toggle.classList.remove('active');
                }
            }

            toggleMode() {
                const toggle = document.getElementById('modeToggle');
                const isShake = toggle.classList.contains('active');
                
                if (isShake) {
                    toggle.classList.remove('active');
                    document.getElementById('modeLabel').textContent = 'Tap-Modus';
                    document.getElementById('actionLabel').textContent = 'Taps erforderlich';
                } else {
                    toggle.classList.add('active');
                    document.getElementById('modeLabel').textContent = 'Shake-Modus';
                    document.getElementById('actionLabel').textContent = 'Shakes erforderlich';
                }
            }

            toggleDefaultMode() {
                const toggle = document.getElementById('defaultModeToggle');
                const isShake = toggle.classList.contains('active');
                
                if (isShake) {
                    toggle.classList.remove('active');
                    this.settings.defaultMode = 'tap';
                } else {
                    toggle.classList.add('active');
                    this.settings.defaultMode = 'shake';
                }
                
                this.saveSettings();
            }

            toggleHaptic() {
                const toggle = document.getElementById('hapticToggle');
                const isActive = toggle.classList.contains('active');
                
                if (isActive) {
                    toggle.classList.remove('active');
                    this.settings.hapticFeedback = false;
                } else {
                    toggle.classList.add('active');
                    this.settings.hapticFeedback = true;
                }
                
                this.saveSettings();
            }

            updateSliderValue(event) {
                const value = event.target.value;
                document.getElementById('actionValue').textContent = value;
            }

            updateDefaultActions(event) {
                this.settings.defaultActions = parseInt(event.target.value);
                this.saveSettings();
            }

            updateSaltLength(event) {
                this.settings.saltLength = parseInt(event.target.value);
                this.saveSettings();
            }

            // Utilities
            formatDate(isoDate) {
                const date = new Date(isoDate);
                const now = new Date();
                const diffMs = now - date;
                const diffMins = Math.floor(diffMs / 60000);
                
                if (diffMins < 1) return 'Gerade eben';
                if (diffMins < 60) return `Vor ${diffMins} Min.`;
                if (diffMins < 1440) return `Vor ${Math.floor(diffMins / 60)} Std.`;
                return `Vor ${Math.floor(diffMins / 1440)} Tagen`;
            }

            hapticFeedback(type = 'light') {
                if (!this.settings.hapticFeedback) return;
                
                if (navigator.vibrate) {
                    switch (type) {
                        case 'light':
                            navigator.vibrate(10);
                            break;
                        case 'success':
                            navigator.vibrate([50, 100, 50]);
                            break;
                        case 'error':
                            navigator.vibrate([100, 50, 100]);
                            break;
                    }
                }
            }

            showToast(message, type = 'info') {
                // Simple toast implementation
                const toast = document.createElement('div');
                toast.className = 'toast ' + type;
                toast.textContent = message;
                toast.style.cssText = `
                    position: fixed;
                    bottom: 100px;
                    left: 50%;
                    transform: translateX(-50%);
                    background: ${type === 'error' ? 'var(--error-color)' : type === 'success' ? 'var(--success-color)' : 'var(--accent-primary)'};
                    color: white;
                    padding: 16px 24px;
                    border-radius: var(--radius);
                    box-shadow: var(--shadow);
                    z-index: 3000;
                    animation: fadeIn 0.3s ease-in;
                `;
                
                document.body.appendChild(toast);
                
                setTimeout(() => {
                    toast.style.animation = 'fadeOut 0.3s ease-out';
                    setTimeout(() => toast.remove(), 300);
                }, 3000);
            }

            showModal(title, text, onConfirm) {
                const modal = document.getElementById('modal');
                document.getElementById('modalTitle').textContent = title;
                document.getElementById('modalText').textContent = text;
                
                // Update confirm button
                const confirmBtn = document.getElementById('modalConfirm');
                confirmBtn.onclick = () => {
                    this.closeModal();
                    if (onConfirm) onConfirm();
                };
                
                modal.classList.add('active');
            }

            closeModal() {
                document.getElementById('modal').classList.remove('active');
            }

            // Storage
            saveVaults() {
                try {
                    localStorage.setItem('tapvault_vaults', JSON.stringify(this.vaults));
                } catch (e) {
                    console.error('Failed to save vaults:', e);
                }
            }

            loadVaults() {
                try {
                    const saved = localStorage.getItem('tapvault_vaults');
                    return saved ? JSON.parse(saved) : [];
                } catch (e) {
                    console.error('Failed to load vaults:', e);
                    return [];
                }
            }

            saveSettings() {
                try {
                    localStorage.setItem('tapvault_settings', JSON.stringify(this.settings));
                } catch (e) {
                    console.error('Failed to save settings:', e);
                }
            }

            loadSettings() {
                try {
                    const saved = localStorage.getItem('tapvault_settings');
                    const defaults = {
                        darkMode: true,
                        hapticFeedback: true,
                        defaultMode: 'tap',
                        defaultActions: 50,
                        saltLength: 16
                    };
                    return saved ? { ...defaults, ...JSON.parse(saved) } : defaults;
                } catch (e) {
                    console.error('Failed to load settings:', e);
                    return {
                        darkMode: true,
                        hapticFeedback: true,
                        defaultMode: 'tap',
                        defaultActions: 50,
                        saltLength: 16
                    };
                }
            }

            applySettings() {
                // Apply theme
                if (!this.settings.darkMode) {
                    document.body.setAttribute('data-theme', 'light');
                    document.getElementById('themeToggle').textContent = '‚òÄÔ∏è';
                    document.getElementById('darkModeToggle').classList.remove('active');
                }
                
                // Apply other settings
                document.getElementById('defaultActions').value = this.settings.defaultActions;
                document.getElementById('saltLength').value = this.settings.saltLength;
                
                if (this.settings.defaultMode === 'shake') {
                    document.getElementById('defaultModeToggle').classList.add('active');
                }
                
                if (!this.settings.hapticFeedback) {
                    document.getElementById('hapticToggle').classList.remove('active');
                }
            }

            // Deep linking
            checkDeepLink() {
                const hash = window.location.hash;
                if (hash.startsWith('#vault=')) {
                    const vaultId = hash.substring(7);
                    this.loadVaultFromId(vaultId);
                }
            }
        }

        // Initialize app
        const app = new TapVaultApp();

        // Add fade-out animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeOut {
                from { opacity: 1; transform: translateY(0); }
                to { opacity: 0; transform: translateY(20px); }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>